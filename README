Donald Elmore
C44140506
ECE 3220 - Operating Systems
Assignment 1

REFERENCES
	Throughout this project I used the code samples supplied in the git repository.
	Specifically the ptrace_example.c, shim.c, lecture_notes.md. I also used the man
	pages for execvp/execvpe, ptrace, waitpid and my own notes taken from lecture.

DESIGN
	Memory Leak Detector:
	I made use of the environ variable and execvpe to execute the test program
	along with LD_PRELOAD to load my own malloc/free library before the standard.
	I used a linked list to keep track of the malloc pointers, essentially keeping
	an item in the list as long as it was still malloced, and then removing the node
	once free had been called on it. Then, at the end of the program whichever nodes
	remained in the list were memory leaks, as free had not been called on those
	pointers.

	System Call Tracer:
	I used an array of size 338 (the number of linux syscalls) to keep track of
	the number of occurences of each syscall.
	First I created a child process and stopped it to allow the parent to trace it,
	then called execvp to execute the test program. I then waited for a syscall, and
	once that call was called I incremented the element in the array that corresponded
	to the syscall used. I attempted t0 repeat this process for each call, then used
	fprintf to print the results to an output file.

KNOWN PROBLEMS
	Memory Leak Detector: None known
	System Call Tracer: I could not pass the third test on the autograder, due to an
	issue with syscall stops that I could not track down. I think the issue had
	something to do with me not letting the process finish correctly after stopping
	or something of the sort, but did not have another autograder submission to use
	and did not want to risk messing up the two tests that did work.

